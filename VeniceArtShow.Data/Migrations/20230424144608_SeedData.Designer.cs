// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace VeniceArtShow.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230424144608_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MediaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderEntityId");

                    b.ToTable("Medias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MediaType = "Painting"
                        },
                        new
                        {
                            Id = 2,
                            MediaType = "Photograph"
                        });
                });

            modelBuilder.Entity("OrderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArtistId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ArtistId1")
                        .HasColumnType("int");

                    b.Property<string>("BuyerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BuyerId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId1");

                    b.HasIndex("BuyerId1");

                    b.HasIndex("MediaId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateListed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("MediaId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArtistId = 1,
                            DateListed = new DateTime(2023, 4, 24, 10, 46, 8, 379, DateTimeKind.Local).AddTicks(3340),
                            Description = "Painting of Mona Lisa in style of Edward Hopper",
                            ImageUrl = "https://effinghamdailynews.com/today",
                            MediaId = 1,
                            Price = 4.9900000000000002,
                            Title = "Nighthawks Nona Lisa"
                        },
                        new
                        {
                            Id = 2,
                            ArtistId = 2,
                            DateListed = new DateTime(2023, 4, 24, 10, 46, 8, 379, DateTimeKind.Local).AddTicks(3350),
                            Description = "A depiction of sound which is like but not the same as that Scream painting by Edward Munch",
                            ImageUrl = "https://hollyjanedie.com",
                            MediaId = 2,
                            Price = 40.530000000000001,
                            Title = "Sirens That Make You Scream"
                        });
                });

            modelBuilder.Entity("UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderEntityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Biography = "Retired from a life fishing along the Mississippi, Horace began his unique sandbar drawings and they quiclky became popular on Instagram.",
                            DateCreated = new DateTime(2023, 4, 24, 10, 46, 8, 379, DateTimeKind.Local).AddTicks(3060),
                            Email = "unbricker@efa.org",
                            FirstName = "Horace",
                            LastName = "Greenbottom",
                            Password = "openSesame32211!",
                            UserName = "bricksRnotUs"
                        },
                        new
                        {
                            Id = 2,
                            Biography = "Holly, a friend of Go Lightly, decided one day to aim her Hollywood lights at 3 mirrors. The rest is history.",
                            DateCreated = new DateTime(2023, 4, 24, 10, 46, 8, 379, DateTimeKind.Local).AddTicks(3150),
                            Email = "thingPainter@efa.org",
                            FirstName = "Holly",
                            LastName = "Janedie",
                            Password = "8dj23jdjdj1++",
                            UserName = "LotsOfThingsToPaint"
                        });
                });

            modelBuilder.Entity("MediaEntity", b =>
                {
                    b.HasOne("OrderEntity", null)
                        .WithMany("Artworks")
                        .HasForeignKey("OrderEntityId");
                });

            modelBuilder.Entity("OrderEntity", b =>
                {
                    b.HasOne("UserEntity", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserEntity", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaEntity", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Buyer");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("ProductEntity", b =>
                {
                    b.HasOne("UserEntity", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaEntity", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("UserEntity", b =>
                {
                    b.HasOne("OrderEntity", null)
                        .WithMany("Owners")
                        .HasForeignKey("OrderEntityId");
                });

            modelBuilder.Entity("OrderEntity", b =>
                {
                    b.Navigation("Artworks");

                    b.Navigation("Owners");
                });
#pragma warning restore 612, 618
        }
    }
}
